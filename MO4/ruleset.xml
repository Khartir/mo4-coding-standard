<?xml version="1.0"?>
<ruleset name="MO4">
    <description>The MO4 PHP coding standard.</description>
    <!-- There should not be any code in the bundle Resources directory. -->
    <exclude-pattern>*/Resources/*</exclude-pattern>

    <!-- Include the whole Symfony standard (which pulls in PSR2) -->
    <rule ref="Symfony">
        <!-- exclude sniffs that are extended by this standard -->
        <exclude name="PEAR.Functions.FunctionCallSignature"/>
        <exclude name="PSR2.Namespaces.UseDeclaration"/>
        <!-- exclude sniffs that are disabled on purpose by this standard -->
        <exclude name="Symfony.Commenting.ClassComment.Missing"/>
        <exclude name="Symfony.Commenting.License"/>
    </rule>

    <!-- Forbid strings in `"` unless necessary -->
    <rule ref="Squiz.Strings.DoubleQuoteUsage.NotRequired" />
    <!-- There must be at least one space around operators -->
    <rule ref="Squiz.WhiteSpace.OperatorSpacing">
        <properties>
            <property name="ignoreNewlines" value="true"/>
        </properties>
    </rule>

    <!-- Split long if statements onto several lines by PEAR rules -->
    <rule ref="PEAR.ControlStructures.MultiLineCondition"/>

    <!-- Force array element indentation with 4 spaces -->
    <rule ref="Generic.Arrays.ArrayIndent"/>
    <!-- Forbid `array(...)` -->
    <rule ref="Generic.Arrays.DisallowLongArraySyntax"/>
    <!-- Force whitespace after a type cast -->
    <rule ref="Generic.Formatting.SpaceAfterCast"/>
    <!-- Align corresponding assignment statement tokens -->
    <rule ref="Generic.Formatting.MultipleStatementAlignment">
        <properties>
            <property name="error" value="true"/>
        </properties>
    </rule>
    <!-- Forbid useless inline string concatenation -->
    <rule ref="Generic.Strings.UnnecessaryStringConcat">
        <!-- But multiline is useful for readability -->
        <properties>
            <property name="allowMultiline" value="true"/>
        </properties>
    </rule>

    <rule ref="SlevomatCodingStandard.TypeHints.NullableTypeForNullDefaultValue"/>
    <rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHintSpacing" />
    <rule ref="SlevomatCodingStandard.TypeHints.TypeHintDeclaration">
        <properties>
            <property name="allAnnotationsAreUseful" value="true"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.TypeHints.TypeHintDeclaration.MissingTraversableParameterTypeHintSpecification">
        <severity>0</severity>
    </rule>
    <rule ref="SlevomatCodingStandard.TypeHints.TypeHintDeclaration.MissingTraversablePropertyTypeHintSpecification">
        <severity>0</severity>
    </rule>
    <rule ref="SlevomatCodingStandard.TypeHints.TypeHintDeclaration.MissingTraversableReturnTypeHintSpecification">
        <severity>0</severity>
    </rule>
    <rule ref="SlevomatCodingStandard.TypeHints.TypeHintDeclaration.UselessDocComment">
        <severity>0</severity>
    </rule>
</ruleset>

